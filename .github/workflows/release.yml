name: 构建并发布Release

on:
  push:
    tags:
      - 'v*' # 当推送以v开头的标签时触发，例如v1.0.0

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      - name: 安装依赖
        run: npm install
      
      - name: 运行构建脚本
        run: node build.js
      
      - name: 打包dist目录
        run: |
          cd dist
          zip -r ../md-editor-vanilla-${{ github.ref_name }}.zip .
          cd ..
      
      - name: 获取版本号
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: 创建Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Markdown编辑器 ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            md-editor-vanilla-${{ github.ref_name }}.zip
          body: |
            # Markdown编辑器 ${{ github.ref_name }} 发布
            
            这是Markdown编辑器的优化构建版本，所有代码已经过压缩和优化。
            
            ## 使用方法
            
            1. 下载并解压 `md-editor-vanilla-${{ github.ref_name }}.zip` 文件
            2. 直接在浏览器中打开 `index.html` 文件
            3. 或者通过HTTP服务器提供服务（推荐）:
               - 使用Node.js: `npx serve` 或 `npx http-server`
               - 使用Python: `python -m http.server`
            
            ## 构建信息
            
            构建时间: ${{ github.event.repository.updated_at }}
            
            ## 更新内容
            
            - 请在此处添加版本更新内容
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 将dist目录推送到production分支
        run: |
          # 配置Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 创建一个新的临时分支
          git checkout --orphan temp-production
          
          # 清理工作目录，只保留dist目录
          find . -mindepth 1 -maxdepth 1 -not -name 'dist' -not -name '.git' -exec rm -rf {} \;
          
          # 将dist目录中的内容移动到根目录
          mv dist/* .
          rm -rf dist
          
          # 添加所有文件并提交
          git add .
          git commit -m "更新production分支，使用 ${{ github.ref_name }} 版本的构建文件"
          
          # 强制推送到production分支
          git push -f https://${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}.git temp-production:production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 